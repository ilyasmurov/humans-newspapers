import React from 'react'

import data from './data'
import './HumansNewspapers.css'

const importAll = require =>
  require.keys().reduce((acc, next) => {
    acc[next.replace("./", "")] = require(next);
    return acc;
  }, {});

const images = importAll(
  require.context("./img", false, /\.(png|jpe?g|svg)$/)
);

class HumansNewspapers extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      width: 0,
      items: [],
      current: 0,
      max: 0
    }
  }

  canClick = true

  generateStyles = width => `
    @keyframes newspaperShowFromLeft {
      0% {margin-left:-${width}%;opacity:0}
      100% {margin-left:0;opacity:1}
    }
    @keyframes newspaperHideFromRight {
      0% {margin-right:0;opacity:1}
      100% {margin-right:-${width}%;opacity:0}
    }
    @keyframes newspaperShowFromRight {
      0% {margin-right:-${width}%;opacity:0}
      100% {margin-right:0;opacity:1}
    }
    @keyframes newspaperHideFromLeft {
      0% {margin-left:0;opacity:1}
      100% {margin-left:-${width}%;opacity:0}
    }
  `

  componentDidMount() {
    const main = document.querySelector('.humans-newspapers-layout');
    const wrapper = main.querySelector('.humans-newspapers-layout-wrapper');
    const width = wrapper.offsetWidth;
    const max = Math.round(width / 170);
    const show = data.slice(0, max);
    const elementWidth = 100 / max;
    this.setState({
      width: elementWidth,
      items: show,
      max: max,
      main: main,
      wrapper: wrapper,
      last: max - 1,
      styles: this.generateStyles(elementWidth)
    })

    window.addEventListener('resize', this.resize)
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.resize)
  }

  reRender = (prevState, nextState) => {
    const { main, wrapper, styles, max, width, current } = nextState;
    const content = wrapper.querySelector('.humans-newspapers-layout-content');

    if (prevState.max !== nextState.max) {
      let _template = '';
      for (let i = current; i < current + max; i++) {
        const element = data[i];
        _template += `
        <div class="humans-newspapers-layout-newspapers-id" style="width: ${width}%">
          <a target='_blank' style="background-image:url(${images[element.image]})" title="${element.title}" href="${element.url}"></a>
        </div>`
      }

      content.innerHTML = _template;
      main.querySelector('#humans-newspapers-layout-styles').innerHTML = styles;

    }
  }

  resize = e => {
    const { wrapper, current } = this.state;
    const width = wrapper.offsetWidth;
    const max = Math.round(width / 170);
    const elementWidth = 100 / max;
    const prevState = this.state;
    this.setState({
      width: elementWidth,
      max: max,
      current: 0,
      last: max - 1,
      styles: this.generateStyles(elementWidth)
    }, () => {
      this.reRender(prevState, this.state);
    })
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (this.state.max > 0) return false;
    return true;
  }

  createElement = (element, className) => {
    const { width } = this.state;
    let newElement = document.createElement('div');
    newElement.className = 'humans-newspapers-layout-newspapers-id ' + className;
    newElement.style.width = width + '%';
    newElement.innerHTML = `<a target='_blank' style="background-image:url(${images[element.image]})" title="${element.title}" href="${element.url}"></a>`;
    return newElement;
  }

  toLeft = () => {
    let { wrapper, current, max, items, last } = this.state;

    if (this.canClick) {

      this.canClick = false;

      current = current > 0 ? (current - 1) : (data.length - 1);
      last = last - 1 >= 0 ? last - 1 : max - 1;
      items.pop();
      const show = [].concat(data[current], items);

      const lastElement = wrapper.querySelector('.humans-newspapers-layout-content .humans-newspapers-layout-newspapers-id:last-child');
      const firstElement = wrapper.querySelector('.humans-newspapers-layout-content .humans-newspapers-layout-newspapers-id:first-child');

      const element = this.createElement(data[current], 'show-left');

      wrapper.querySelector('.humans-newspapers-layout-content').insertBefore(element, firstElement);
      lastElement.classList.add('hide-right');

      setTimeout(() => {
        element.classList.remove('hide-left');
        element.classList.remove('show-left');
        lastElement.remove();
        this.setState({
          current: current,
          last: last,
          items: show
        })
        this.canClick = true;
      }, 200);

    }

  }

  toRight = () => {
    let { wrapper, current, last, items } = this.state;

    if (this.canClick) {

      this.canClick = false;

      current = current + 1 < data.length - 1 ? current + 1 : 0;
      last = last + 1 <= data.length - 1 ? last + 1 : 0;
      items.shift();
      const show = [].concat(items, data[last]);

      const first = wrapper.querySelector('.humans-newspapers-layout-content .humans-newspapers-layout-newspapers-id:first-child');
      const element = this.createElement(data[last], 'show-right');

      wrapper.querySelector('.humans-newspapers-layout-content').appendChild(element);
      first.classList.add('hide-left');

      setTimeout(() => {
        element.classList.remove('show-right');
        element.classList.remove('hide-right');
        first.remove();
        this.setState({
          current: current,
          last: last,
          items: show,
        })
        this.canClick = true;
      }, 200);

    }

  }

  render() {
    const { items, styles } = this.state;

    return (
      <div className="humans-newspapers-layout">
        <style id="humans-newspapers-layout-styles">
          { styles }
        </style>
        <div className="humans-newspapers-layout-newspapers">
          <div className="humans-newspapers-layout-arrow humans-newspapers-layout-arrow-toleft" onClick={this.toLeft}>
            <svg width="13" height="28" fill="none">
              <path fillRule="evenodd" clipRule="evenodd" d="M13 0H11L0 14L11 28H13L2 14L13 0Z" fill="#FF585D"/>
            </svg>
          </div>
          <div className="humans-newspapers-layout-wrapper">
            <div className="humans-newspapers-layout-content">
              {items.length && items.map((item, index) => {
                return (
                  <div key={item.image} className="humans-newspapers-layout-newspapers-id" style={{'width': this.state.width + '%'}}>
                    <a target='_blank' style={{'backgroundImage':`url(${images[item.image]})`}} title={item.title} href={item.url}></a>
                  </div>
                )
              })}
            </div>
          </div>
          <div className="humans-newspapers-layout-arrow humans-newspapers-layout-arrow-toright" onClick={this.toRight}>
            <svg width="13" height="28" viewBox="0 0 13 28" fill="none">
            < path fillRule="evenodd" clipRule="evenodd" d="M13 0H11L0 14L11 28H13L2 14L13 0Z" transform="translate(13) scale(-1 1)" fill="#FF585D"/>
            </svg>
          </div>
        </div>
      </div>
    )
  }
}

export default HumansNewspapers